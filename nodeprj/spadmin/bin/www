#!/usr/bin/env node
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('spadmin:server');
var https = require('https');
var http = require('http');
var fs = require('fs');

// this line is from the Node.js HTTPS documentation.
//var privateKey  = fs.readFileSync('../cmn/localcerts/server.key', 'utf8');
//var certificate = fs.readFileSync('../cmn/localcerts/server.cert', 'utf8');

var privateKey  = fs.readFileSync('../cmn/localcerts/localhost.key', 'utf8');
var certificate = fs.readFileSync('../cmn/localcerts/localhost.crt', 'utf8');
var credentials = {key: privateKey, cert: certificate};
/*
var options = {
  address: '127.0.0.1',
  port: 4043,
  key: privateKey,
  cert: certificate
};
*/

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app).listen(4000, "127.0.0.1");
//var httpsServer = https.createServer(credentials, app).listen(4043, "127.0.0.1");

/*
https.createServer(options, (req, res) => {
    res.writeHead(200);
    res.end('SCREAM World of Crap\n');
    console.log('In HTTPS');
}).listen(4043);
*/
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/*
httpsServer.listen(4043);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);
*/
//---
/* var soptions = {
	key:  fs.readFileSync('/home/boo/node-prj/cmn/localcerts/localhost.key').toString(),
	cert: fs.readFileSync('/home/boo/node-prj/cmn/localcerts/localhost.crt').toString(),
	//rejectUnauthorized: false,
	//requestCert: true,
	//agent: false
};
var hostname = 'localhost';
var sserver;
try {
	sserver = https.createServer(soptions, app, (res) => {
		//var host = sserver.address().address;
		//var port = sserver.address().port;
		console.log('running at HTTPS');
		//res.end('Boo');
	});
	sserver.listen(8000, hostname);

} catch( err ) {
	console.error(err);
}
 */
/**
 * Normalize a port into a number, string, or false.
 */

 ///------------------------------
function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) {
		// named pipe
		return val;
 	}
	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}
	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
